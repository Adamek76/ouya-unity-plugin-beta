task copyJar(dependsOn: ':java:build', type: Copy) {
	from new File(project(':java').buildDir, 'bundles/release/classes.jar')
	into 'Assets/Plugins/Android/libs'
	rename {'ouya.jar'}
}

task copyLibs(dependsOn: ':java:build', type: Copy) {
	from(new File(project(':java').buildDir, 'ndk/release/lib')) {
		include '**/*.so'
	}
	into 'Assets/Plugins/Android/libs'
}

task removeFiles(type: Delete) {
	delete 'Assets/Ouya/Android/libs/ouya.jar', 
		'Assets/Ouya/Android/libs/ouya.jar.meta' 
}

task clean(dependsOn: 'removeFiles'){}

task copyFiles(dependsOn: ['copyJar', 'copyLibs']) {}

task unityPackage(dependsOn: 'copyFiles') << {
	def logFile = file("$buildDir/unityPackage.log")
	logFile.parentFile.mkdirs()

	
	def os = System.getProperty("os.name").toLowerCase()
	def unityFolder
    if(System.getenv("UNITY_HOME")) {
        unityFolder = System.getenv("UNITY_HOME")
    } else if(os.contains('windows')) {
		unityFolder = 'C:\\Program Files (x86)\\Unity'
	} else if (os.contains('mac')) {
		unityFolder = '/Applications/Unity/Unity.app'
	}

	def unityCmd
	if(os.contains('windows')) {
		unityCmd = ['cmd', '/c', '\"'+unityFolder+'\\Editor\\Unity.exe\"']
	} else if (os.contains('mac')) {
		unityCmd = unityFolder+'/Contents/MacOS/Unity'
	}

	project.exec {
		commandLine unityCmd
		args '-batchMode'
		args '-quit'
		args '-projectPath'
		args file('.')
		args '-exportPackage'
		args 'Assets'
		args file("$buildDir/ouya-unity-plugin.unityPackage")
		args '-cleanedLogFile'
		args logFile
		args '-quit'
	}
	println logFile.text
}
